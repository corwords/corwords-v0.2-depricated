// <auto-generated />
using Corwords.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Corwords.Web.Migrations
{
    [DbContext(typeof(CorwordsDbContext))]
    [Migration("20170930014844_InitialCorwordsCreate")]
    partial class InitialCorwordsCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Corwords.Web.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseUrl");

                    b.Property<string>("Name");

                    b.Property<string>("Username");

                    b.HasKey("BlogId");

                    b.ToTable("Corwords_Blog");
                });

            modelBuilder.Entity("Corwords.Web.Models.BlogPost", b =>
                {
                    b.Property<int>("BlogPostId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<int>("BlogId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("OriginalBlogPostId");

                    b.Property<string>("Permalink");

                    b.Property<string>("Slug");

                    b.Property<string>("Title");

                    b.HasKey("BlogPostId");

                    b.HasIndex("BlogId");

                    b.ToTable("Corwords_BlogPost");
                });

            modelBuilder.Entity("Corwords.Web.Models.BlogPostTag", b =>
                {
                    b.Property<int>("BlogPostTagId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlogPostId");

                    b.Property<int>("TagId");

                    b.HasKey("BlogPostTagId");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("TagId");

                    b.ToTable("Corwords_BlogPostTag");
                });

            modelBuilder.Entity("Corwords.Web.Models.BlogTag", b =>
                {
                    b.Property<int>("BlogTagId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlogId");

                    b.Property<int>("TagId");

                    b.HasKey("BlogTagId");

                    b.HasIndex("BlogId");

                    b.HasIndex("TagId");

                    b.ToTable("Corwords_BlogTag");
                });

            modelBuilder.Entity("Corwords.Web.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("TagId");

                    b.ToTable("Corwords_Tag");
                });

            modelBuilder.Entity("Corwords.Web.Models.BlogPost", b =>
                {
                    b.HasOne("Corwords.Web.Models.Blog", "Blog")
                        .WithMany("BlogPosts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Corwords.Web.Models.BlogPostTag", b =>
                {
                    b.HasOne("Corwords.Web.Models.BlogPost", "BlogPost")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Corwords.Web.Models.Tag", "Tag")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Corwords.Web.Models.BlogTag", b =>
                {
                    b.HasOne("Corwords.Web.Models.Blog", "Blog")
                        .WithMany("BlogTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Corwords.Web.Models.Tag", "Tag")
                        .WithMany("BlogTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
